# geemap_tools/gee_utils.py
import ee
import geemap
import eemont
import geopandas as gpd
import pandas as pd
from tqdm import tqdm
import os
import warnings
from pathlib import Path
from zipfile import ZipFile
import tempfile
from tempfile import TemporaryDirectory


def index_to_timeseries(df, roi, index_name, scale=None, debug=False):
    """
    Calcula o valor m√©dio e o desvio padr√£o de um √≠ndice espectral do eemont
    sobre uma ROI, para cada imagem listada em um DataFrame.

    Args:
        df (pd.DataFrame): DataFrame com coluna 'id' contendo IDs de imagens.
        roi (ee.Geometry): Regi√£o de interesse.
        index_name (str): Nome do √≠ndice (ex: 'NDWI', 'NDMI', 'MNDWI', etc.).
        scale (int, optional): Escala em metros (detectada automaticamente se None).
        debug (bool): Se True, imprime mensagens de debug.

    Returns:
        pd.DataFrame: Mesmo DataFrame com colunas <index_name>_mean e _std.
    """
    index_means = []
    index_stds = []

    for img_id in tqdm(df['id'], desc=f"Calculando {index_name} na ROI"):
        try:
            img = ee.Image(img_id)
            img = img.spectralIndices(index_name)

            # Detecta escala baseada no sensor (se necess√°rio)
            if scale is None:
                bands = img.bandNames().getInfo()
                if 'QA_PIXEL' in bands:
                    used_scale = 30  # Landsat
                elif 'SCL' in bands:
                    used_scale = 20  # Sentinel-2
                else:
                    used_scale = 10
                if debug:
                    print(f"[DEBUG] Escala auto-definida para {img_id}: {used_scale}")
            else:
                used_scale = scale

            # Redu√ß√£o do √≠ndice sobre a ROI
            stats = img.select(index_name).reduceRegion(
                reducer=ee.Reducer.mean().combine(ee.Reducer.stdDev(), sharedInputs=True),
                geometry=roi,
                scale=used_scale,
                maxPixels=1e9
            ).getInfo()

            index_means.append(stats.get(f"{index_name}_mean"))
            index_stds.append(stats.get(f"{index_name}_stdDev"))

        except Exception as e:
            if debug:
                print(f"[DEBUG] Falha ao calcular {index_name} para {img_id}: {e}")
            index_means.append(None)
            index_stds.append(None)

    df = df.copy()
    df[f"{index_name}_mean"] = index_means
    df[f"{index_name}_std"] = index_stds

    return df

def describe_roi(roi, show_pixels_table=True, print_summary=True, pixel_res=None):
    """
    Descreve uma ROI do Google Earth Engine, retornando √°rea, per√≠metro
    e estimativa do n√∫mero de pixels para diferentes resolu√ß√µes espaciais.

    Args:
        roi (ee.Geometry | ee.Feature | ee.FeatureCollection): Regi√£o de interesse.
        show_pixels_table (bool): Se True, exibe uma tabela com n¬∫ estimado de pixels por resolu√ß√£o.
        print_summary (bool): Se True, imprime √°rea e per√≠metro formatados.
        pixel_res (int | float | list, opcional): Resolu√ß√£o em metros para estimativa.
            Por padr√£o usa [10, 30, 60]. Pode ser usada com valores como 4000 (TerraClimate) ou 5000 (CHIRPS).

    Returns:
        dict: {
            "area_km2": √°rea total em km¬≤,
            "perimetro_km": per√≠metro total em km,
            "n_pixels": dicion√°rio com estimativas de n√∫mero de pixels por resolu√ß√£o,
            "df": DataFrame com a tabela (se show_pixels_table=True)
        }
    """
    import pandas as pd

    # Unifica em uma √∫nica geometria se necess√°rio
    if isinstance(roi, ee.FeatureCollection):
        geom = roi.geometry()
    elif isinstance(roi, ee.Feature):
        geom = roi.geometry()
    elif isinstance(roi, ee.Geometry):
        geom = roi
    else:
        raise TypeError("Tipo inv√°lido. Use ee.Geometry, ee.Feature ou ee.FeatureCollection.")

    # C√°lculo da √°rea e per√≠metro
    area_m2 = geom.area(ee.ErrorMargin(1)).getInfo()
    perimeter_m = geom.perimeter(maxError=1).getInfo()

    area_km2 = area_m2 / 1e6
    perimeter_km = perimeter_m / 1000

    if print_summary:
        print(f"üìê √Årea total: {area_km2:,.2f} km¬≤")
        print(f"üìè Per√≠metro total: {perimeter_km:,.2f} km")

    # Resolu√ß√µes padr√£o ou personalizadas
    if pixel_res is None:
        resolutions = [10, 30, 60]
    elif isinstance(pixel_res, (int, float)):
        resolutions = [pixel_res]
    elif isinstance(pixel_res, (list, tuple)):
        resolutions = list(pixel_res)
    else:
        raise ValueError("pixel_res deve ser int, float ou lista de valores num√©ricos.")

    # Estima n√∫mero de pixels por resolu√ß√£o
    pixels_dict = {
        f"{int(res)}m": int(round(area_m2 / (res**2)))
        for res in resolutions
    }

    df = None
    if show_pixels_table:
        df = pd.DataFrame({
            "Resolu√ß√£o (m)": resolutions,
            "√Årea de pixel (m¬≤)": [res**2 for res in resolutions],
            "N¬∫ estimado de pixels": list(pixels_dict.values())
        })
        display(df)

    return {
        "area_km2": area_km2,
        "perimetro_km": perimeter_km,
        "n_pixels": pixels_dict,
        "df": df if show_pixels_table else None
    }


def get_TerraClimate(roi, start="2000-01-01", end="2025-12-31",
                     variables=["pr", "pet", "tmmx", "tmmn"],
                     debug=False):
    """
    Extrai estat√≠sticas mensais da cole√ß√£o TerraClimate para uma ROI.

    Args:
        roi (ee.Geometry): Regi√£o de interesse.
        start (str): Data inicial no formato 'YYYY-MM-DD'.
        end (str): Data final no formato 'YYYY-MM-DD'.
        variables (list): Lista com vari√°veis desejadas.  
                          Op√ß√µes v√°lidas:
                          ['aet', 'def', 'pdsi', 'pet', 'pr', 'q', 'soil',
                           'swe', 'tmmx', 'tmmn', 'vap', 'vpd', 'ws']
        debug (bool): Se True, imprime mensagens de depura√ß√£o.

    Returns:
        pd.DataFrame: DataFrame com estat√≠sticas mensais para cada vari√°vel selecionada.
                      Cada vari√°vel ter√° colunas com os sufixos:
                      _mean, _median, _max, _min, _stdDev.
    """

    # Lista completa de vari√°veis dispon√≠veis no TerraClimate
    valid_vars = [
        'aet',  # Evapotranspira√ß√£o real
        'def',  # D√©ficit h√≠drico
        'pdsi', # √çndice de seca de Palmer
        'pet',  # Evapotranspira√ß√£o potencial
        'pr',   # Precipita√ß√£o
        'q',    # Vaz√£o superficial
        'soil', # Umidade do solo
        'swe',  # Equivalente em √°gua da neve
        'tmmx', # Temperatura m√°xima
        'tmmn', # Temperatura m√≠nima
        'vap',  # Press√£o de vapor
        'vpd',  # D√©ficit de press√£o de vapor
        'ws'    # Velocidade do vento
    ]

    vars_selected = [v for v in variables if v in valid_vars]
    if len(vars_selected) == 0:
        raise ValueError(f"Nenhuma vari√°vel v√°lida selecionada. Use alguma das seguintes: {valid_vars}")

    # Carrega a cole√ß√£o filtrada por ROI e datas
    terra = (
        ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")
        .select(vars_selected)
        .filterBounds(roi)
        .filterDate(start, end)
    )

    # Redutor composto
    reducer = (
        ee.Reducer.mean()
        .combine(ee.Reducer.median(), sharedInputs=True)
        .combine(ee.Reducer.minMax(), sharedInputs=True)
        .combine(ee.Reducer.stdDev(), sharedInputs=True)
    )

    # Fun√ß√£o para extrair estat√≠sticas por imagem mensal
    def stats_by_month(img):
        stats = img.reduceRegion(
            reducer=reducer,
            geometry=roi,
            scale=4000,
            maxPixels=1e9
        )

        result = {'date': img.date().format("YYYY-MM")}
        for var in vars_selected:
            for stat in ['mean', 'median', 'max', 'min', 'stdDev']:
                result[f"{var}_{stat}"] = stats.get(f"{var}_{stat}")
        return ee.Feature(None, result)

    # Aplica a fun√ß√£o
    features = ee.FeatureCollection(terra.map(stats_by_month))

    # Converte para DataFrame
    df = geemap.ee_to_df(features)
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date').set_index('date')

    # Ajusta temperaturas (de d√©cimos de grau para ¬∞C)
    for tvar in ['tmmx', 'tmmn']:
        if tvar in vars_selected:
            for stat in ['mean', 'median', 'max', 'min', 'stdDev']:
                col = f"{tvar}_{stat}"
                if col in df.columns:
                    df[col] = df[col] / 10.0

    # Define atributos com unidades
    units = {
        "aet": "mm",
        "def": "mm",
        "pdsi": "√≠ndice (adimensional)",
        "pet": "mm",
        "pr": "mm",
        "q": "mm",
        "soil": "mm",
        "swe": "mm",
        "tmmx": "¬∞C",
        "tmmn": "¬∞C",
        "vap": "kPa",
        "vpd": "kPa",
        "ws": "m/s"
    }
    df.attrs = {f"{v}_unit": units[v] for v in vars_selected}

    if debug:
        print(f"[DEBUG] Vari√°veis selecionadas: {vars_selected}")
        print(f"[DEBUG] Linhas retornadas: {len(df)}")
        print(f"[DEBUG] Colunas: {list(df.columns)}")

    return df

import ee
import pandas as pd
import warnings
from tqdm import tqdm
import geemap

def get_CHIRPS(roi, start="2000-01-01", end="2025-12-31", frequency="monthly", debug=False):
    """
    Extrai dados da cole√ß√£o CHIRPS Daily para uma regi√£o e per√≠odo definidos.

    Args:
        roi (ee.Geometry): Regi√£o de interesse (ex: ee.Geometry.Polygon).
        start (str): Data inicial no formato 'YYYY-MM-DD'.
        end (str): Data final no formato 'YYYY-MM-DD'.
        frequency (str): 'daily' ou 'monthly'. Define a frequ√™ncia dos dados.
        debug (bool): Se True, imprime mensagens adicionais para depura√ß√£o.

    Returns:
        pd.DataFrame: DataFrame com estat√≠sticas de precipita√ß√£o (mm), com √≠ndice temporal.
    """
    # === Valida√ß√£o da frequ√™ncia ===
    frequency = frequency.lower()
    if frequency not in ["daily", "monthly"]:
        raise ValueError("frequency deve ser 'daily' ou 'monthly'.")

    # === Carrega cole√ß√£o ===
    chirps = (ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY")
              .filterBounds(roi)
              .filterDate(start, end)
              .select("precipitation"))

    # === Modo di√°rio ===
    if frequency == "daily":
        count = chirps.size().getInfo()
        if count > 2000:
            warnings.warn(f"Aten√ß√£o: {count} imagens di√°rias encontradas. Isso pode levar a uma execu√ß√£o demorada.")

        def extract_daily(img):
            reducer = (ee.Reducer.mean()
                       .combine(ee.Reducer.median(), sharedInputs=True)
                       .combine(ee.Reducer.minMax(), sharedInputs=True)
                       .combine(ee.Reducer.stdDev(), sharedInputs=True))

            stats = img.reduceRegion(
                reducer=reducer,
                geometry=roi,
                scale=5000,
                maxPixels=1e9
            )

            return ee.Feature(None, {
                'date': img.date().format("YYYY-MM-dd"),
                'pr_mean': stats.get('precipitation_mean'),
                'pr_median': stats.get('precipitation_median'),
                'pr_max': stats.get('precipitation_max'),
                'pr_min': stats.get('precipitation_min'),
                'pr_stdDev': stats.get('precipitation_stdDev')
            })

        features = ee.FeatureCollection(chirps.map(extract_daily))

    # === Modo mensal ===
    else:
        years = list(range(int(start[:4]), int(end[:4]) + 1))
        dfs = []

        for year in tqdm(years, desc="Processando CHIRPS mensal"):
            try:
                year_chirps = chirps.filterDate(f"{year}-01-01", f"{year}-12-31")

                def annotate_month(img):
                    date = ee.Date(img.get("system:time_start"))
                    return img.set({
                        "year": date.get("year"),
                        "month": date.get("month"),
                        "year_month": date.format("YYYY-MM")
                    })

                year_chirps = year_chirps.map(annotate_month)
                months = year_chirps.aggregate_array("year_month").distinct()

                def reduce_month(month):
                    month_imgs = year_chirps.filter(ee.Filter.eq("year_month", month))
                    monthly_sum = month_imgs.sum().set("month", month)
                    return monthly_sum

                chirps_monthly_sum = ee.ImageCollection(months.map(reduce_month))

                def stats_month(img):
                    reducer = (ee.Reducer.mean()
                               .combine(ee.Reducer.median(), sharedInputs=True)
                               .combine(ee.Reducer.minMax(), sharedInputs=True)
                               .combine(ee.Reducer.stdDev(), sharedInputs=True))

                    stats = img.reduceRegion(
                        reducer=reducer,
                        geometry=roi,
                        scale=5000,
                        maxPixels=1e9
                    )

                    return ee.Feature(None, {
                        'date': img.get("month"),
                        'pr_mean': stats.get('precipitation_mean'),
                        'pr_median': stats.get('precipitation_median'),
                        'pr_max': stats.get('precipitation_max'),
                        'pr_min': stats.get('precipitation_min'),
                        'pr_stdDev': stats.get('precipitation_stdDev')
                    })

                features_year = chirps_monthly_sum.map(stats_month)
                df_year = geemap.ee_to_df(ee.FeatureCollection(features_year))
                dfs.append(df_year)

            except Exception as e:
                warnings.warn(f"[CHIRPS] Erro no ano {year}: {e}")

        features = pd.concat(dfs, ignore_index=True)

    # === Convers√£o final para DataFrame
    if isinstance(features, pd.DataFrame):
        df = features
    else:
        df = geemap.ee_to_df(features)

    df["date"] = pd.to_datetime(df["date"])
    df = df.sort_values("date").set_index("date")

    df.attrs = {
        "units": "mm",
        "source": "CHIRPS Daily",
        "frequency": frequency
    }

    if debug:
        print("[DEBUG] Linhas retornadas:", len(df))
        print("[DEBUG] Colunas:", df.columns.tolist())
        print("[DEBUG] Per√≠odo:", df.index.min(), "a", df.index.max())

    return df


